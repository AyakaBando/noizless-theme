<div class="wishlist-outer-container">
  <div class="wishlist-container-title-bar">
    <div class="wishlist-main-title">私のお気に入り</div>
    <div class="user-login-status-btn">
      {% if customer %}
        <div>Debug: Customer is logged in</div>
        {{ customer.first_name }}
        {% if customer.email %}
          <div>{{ customer.email }}</div>
        {% endif %}
      {% else %}
        <div class="guest-shopper">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-6"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
          </svg>
          <p>ゲストショッパー</p>
        </div>
      {% endif %}
    </div>
  </div>

  <div class="wishlist-detail-header">
    <div class="setting-icon">
      <svg
        data-slot="icon"
        fill="none"
        stroke-width="1.5"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z"></path>
      </svg>
    </div>
  </div>

  <div id="loading-icon"><img src="{{ 'loading.gif' | asset_url }}" alt="Loading"></div>

  {% comment %} Wishlist Group Selector {% endcomment %}
  <div class="wishlist-group-selector">
    {% comment %} Default Wishlist {% endcomment %}
    <div class="wishlist-group-block" data-group-id="default">私のお気に入り</div>
  </div>

  {% comment %} Wishlist {% endcomment %}
  <div class="wishlist-content-container"></div>
</div>

{% comment %} Settings Modal Window {% endcomment %}
<div id="settings-modal" class="modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <ul class="modal-menu">
      <li class="modal-menu-content">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="w-6 h-6"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.185 2.25 2.25 0 0 0-3.933 2.185Z" />
        </svg>
        <p>リストを共有</p>
      </li>
      <li class="modal-menu-content">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="w-6 h-6"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75" />
        </svg>
        <p>リストを複製</p>
      </li>
      <li class="modal-menu-content content-red">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="w-6 h-6"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
        </svg>
        <p class="">リストを削除</p>
      </li>
    </ul>
  </div>
</div>

{% comment %} Share Wishlist Modal Window {% endcomment %}
<div id="share-wishlist-modal" class="modal share-wishlist-modal">
  <div class="modal-content">
    <span class="close-share-button">&times;</span>
    <form id="share-wishlist-form">
      <h2>メールでリストを共有する</h2>
      <div class="wishlist-input-container">
        <label for="share-name">送信者</label>
        <input type="text" id="share-name" name="name" placeholder="お客様のフルネーム（任意）">
      </div>

      <div class="wishlist-input-container">
        <label for="share-email">共有先アドレス<span class="required">*</span></label>
        <input type="email" id="share-email" name="email" placeholder="shopper@example.com" required>
        <span id="email-validation-message"></span>
      </div>

      <div class="wishlist-input-container">
        <label for="share-comments">メッセージ</label>
        <textarea id="share-comments" name="comments"></textarea>
      </div>

      <div class="required-mark"><span class="required">*</span>は必須です</div>

      <div class="button-container">
        <button type="submit" id="wishlistSubmit" disabled>リストをシェアする</button>
      </div>
    </form>
  </div>

  <iframe id="pdf" style="width: 100%; height: 100%;"></iframe>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Select the wishlist content container
    const wishlistContentContainer = document.querySelector('.wishlist-content-container');
    let wishlistItems = [];

    try {
      const wishlistJSON = localStorage.getItem('wishlist');
      if (wishlistJSON) {
        wishlistItems = JSON.parse(wishlistJSON);
      }
    } catch (error) {
      console.error('Error parsing wishlist data:', error);
    }
    if (wishlistItems.length > 0) {
      wishlistItems.forEach((item) => {
        const priceInCents = Number(item.price);
        const priceInYen = priceInCents / 100;
        const priceText =
          priceInYen == 0 ? 'オープン価格' : priceInYen.toLocaleString('ja-JP', { style: 'currency', currency: 'JPY' });

        const productHTML = `
          <div class="wishlist-item-grid">
            <div class="wishlist-item-box">
              <img src="${item.image}">
            </div>
            <div class="wishlist-description">
              <h3 class="wishlist-title">${item.name}</h3>
              <div class="wishlist-common-name">${item.type}</div>
              <p>${item.title}</p>
              <p>${priceText} ${item.priceInfoDetails ? item.priceInfoDetails : ''}</p>
              <div class="wishlist-common-name">${item.commonName}</div>
              <small>メーカー</small> <br>
              <small>${item.companyName}</small> <br>
              <small>品番</small>
              <p>${item.sku ? item.sku : 'N/A'}</p>
              <small>サイズ</small>
              <p>${item.variantSize}</p>
            </div>
          </div>
        `;

        wishlistContentContainer.insertAdjacentHTML('beforeend', productHTML);
      });
    } else {
      wishlistContentContainer.innerHTML = `
      <div class="find-wishlist">
        <h2 class="find-wishlist-title">お気に入りリストに追加</h2>
        <p class="find-wishlist-content">お気に入りリストを作成すると、リストを工務店やご家族、ご友人にメール等で共有できます。<br>ITEMから「お気に入りに追加」を押してリストを作成してください。</p>
        <button class="find-wishlist-button"><a href="/collections/all">お気に入りを探す</a></button>
      </div>
      `;
    }

    // Settings Modal functionality
    const settingsModal = document.getElementById('settings-modal');
    const openSettingsModalButton = document.querySelector('.setting-icon');
    const closeSettingsModalButton = document.querySelector('.close-button');

    openSettingsModalButton.addEventListener('click', () => {
      settingsModal.style.display = 'block';
    });

    closeSettingsModalButton.addEventListener('click', () => {
      settingsModal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
      if (event.target == settingsModal) {
        settingsModal.style.display = 'none';
      }
    });

    // Share Wishlist Modal functionality
    const shareWishlistModal = document.getElementById('share-wishlist-modal');
    const closeShareWishlistModalButton = document.querySelector('.close-share-button');
    const shareWishlistForm = document.getElementById('share-wishlist-form');
    const emailInput = document.getElementById('share-email');
    const emailValidationMessage = document.getElementById('email-validation-message');
    const wishlistSubmitButton = document.getElementById('wishlistSubmit');
    const validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

    document.querySelectorAll('.modal-menu-content')[0].addEventListener('click', () => {
      shareWishlistModal.style.display = 'block';
      settingsModal.style.display = 'none';
    });

    closeShareWishlistModalButton.addEventListener('click', () => {
      shareWishlistModal.style.display = 'none';
    });

    window.addEventListener('click', (event) => {
      if (event.target == shareWishlistModal) {
        shareWishlistModal.style.display = 'none';
      }
    });

    // Create PDF
    // Convert image to base64 (binary data)
    async function arrayBufferToBase64(buffer) {
      let binary = '';
      let bytes = new Uint8Array(buffer);
      let len = bytes.byteLength;
      for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return window.btoa(binary);
    }

    function getBase64ImageFromUrl(url) {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'Anonymous';
        img.onload = function () {
          const canvas = document.createElement('canvas');
          canvas.width = this.width;
          canvas.height = this.height;

          const ctx = canvas.getContext('2d');
          ctx.drawImage(this, 0, 0);
          const dataUrl = canvas.toDataURL('image/jpeg');
          resolve(dataUrl);
        };
        img.onerror = reject;
        img.src = url;
      });
    }

    shareWishlistForm.addEventListener('submit', async function (event) {
      event.preventDefault();

      const loadingIcon = document.getElementById('loading-icon');
      loadingIcon.style.display = 'block';

      // Fetch wishlist items
      let wishlistItems = JSON.parse(localStorage.getItem('wishlist')) || [];

      let priceText;
      let priceInYen;
      if (wishlistItems.length > 0) {
        wishlistItems.forEach((item) => {
          let priceInCents = Number(item.price);
          priceInYen = priceInCents / 100;
          priceText =
            priceInYen == 0
              ? 'オープン価格'
              : priceInYen.toLocaleString('ja-JP', { style: 'currency', currency: 'JPY' });
        });
      }

      const { jsPDF } = window.jspdf;

      try {
        const fontUrl = '{{ "NotoSansJP-Medium.ttf" | asset_url }}';
        const font = new FontFace('NotoSansJP-Medium', `url(${fontUrl})`);
        font.load().then(() => {
          document.fonts.add(font);
        });

        // Create a new jsPDF instance with custom dimensions
        const doc = new jsPDF({
          orientation: 'landscape', // 'portrait' or 'landscape'
          unit: 'pt', // units: 'pt', 'mm', 'cm', 'in'
          format: [2067, 1462], // width and height in specified units
        });

        // Set up table data
        const includeImage = true;
        const includePrice = true;
        const includeSKU = true;

        const padding = 10;
        let tableData = wishlistItems.map(function (item) {
          let rowData = [item.name];
          console.log(rowData);
          if (includeImage) {
            rowData.push({ image: item.image, width: 50 });
          }
          if (includePrice) {
            rowData.push(priceText);
          }
          if (includeSKU) {
            rowData.push(item.sku);
          }
          return rowData;
        });

        // Set up table parameters
        let columns = ['製品名'];
        if (includeImage) {
          columns.push('製品イメージ');
        }
        if (includePrice) {
          columns.push('金額');
        }
        if (includeSKU) {
          columns.push('品番');
        }

        // Calculate row heights based on image heights
        let rowHeights = tableData.map(function (row) {
          let maxImageHeight = 0;
          row.forEach(function (cell) {
            if (cell && cell.image) {
              let img = new Image();
              img.src = cell.image;
              img.onload = function () {
                maxImageHeight = Math.max(maxImageHeight, img.height);
              };
            }
          });
          return maxImageHeight + 2 * padding;
        });

        // Set up document properties
        doc.setFontSize(16);
        const fontSize = 16;

        // Assuming `tableData` is an array of objects
        const prefetchImages = async (tableData) => {
          return await Promise.all(
            tableData.map(async (item) => {
              if (item[1] && item[1].image) {
                item[1].imageBase64 = await getBase64ImageFromUrl(item[1].image);
              }
              return item;
            })
          );
        };

        const prefetchTableData = await prefetchImages(tableData);
        console.log('prefetchTableData', prefetchTableData);

        // Add table to PDF
        doc.autoTable({
          head: [columns],
          body: prefetchTableData,
          startY: 10,
          margin: { top: 20, right: 20, bottom: 20, left: 20 },
          theme: 'grid',
          headStyles: {
            textColor: [0, 0, 0],
            fillColor: [255, 255, 255],
            valign: 'middle',
            halign: 'center',
          },
          styles: {
            fontSize: fontSize,
            font: 'NotoSansJP-Medium',
            cellPadding: padding,
            minCellHeight: 350,
            lineColor: [0, 0, 0],
            lineWidth: 1,
            valign: 'middle',
            halign: 'center',
          },
          didDrawCell: function (data) {
            if (data.column.index === 1 && includeImage) {
              const cellData = data.cell.raw;
              const max = { height: 300, width: 210 };
              if (cellData && cellData.imageBase64) {
                const cellWidth = data.cell.width - padding * 2;
                const cellHeight = data.cell.height - padding * 2;

                doc.addImage(
                  cellData.imageBase64,
                  'JPEG',
                  data.cell.x + padding,
                  data.cell.y + padding,
                  cellWidth,
                  cellHeight
                );
              }
            }
          },
        });

        // Save the PDF
        doc.save('Noizless Wishlist.pdf');

                // Send the email...
  const emailSent = await sendEmail(wishlistItems); // replace with your email sending logic

  if (emailSent) {
    lockWishlist();
    alert('Wishlist has been locked and email has been sent successfully.');
  } else {
    alert('Failed to send email. Please try again.');
  }


        alert('Email Successfully Sent!');
        // Hide the loading icon after the PDF is generated
        loadingIcon.style.display = 'none';
      } catch (error) {
        console.error('Error creating PDF:', error);
        // Handle error
        // Hide the loading icon
        loadingIcon.style.display = 'none';
        // Show error message to the user
        alert('Error creating PDF. Please try again later.');
      }
    });

    emailInput.addEventListener('input', function () {
      if (emailInput.value.match(validRegex)) {
        emailValidationMessage.textContent = '';
        emailInput.style.border = '';
        wishlistSubmitButton.disabled = false;
      } else {
        emailValidationMessage.textContent = '有効なEメールアドレスを入力してください。';
        emailValidationMessage.style.color = 'red';
        emailInput.style.border = '1px red solid';
        wishlistSubmitButton.disabled = true;
      }
    });
  });
</script>

<style>
  .wishlist-outer-container {
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 100%;
    max-width: 1180px;
    margin: auto;
  }

  .wishlist-container-title-bar {
    display: flex;
    align-items: center;
    flex-shrink: 0;
    background: transparent;
    justify-content: space-between;
    border-bottom: 1px solid #c4c4c4;
    padding: 16px 0;
    height: auto;
  }

  .wishlist-main-title {
    font-weight: 500;
    font-size: 20px;
    letter-spacing: 0.1em;
    color: #434655;
    display: block;
  }

  .wishlist-content-container {
    margin-top: 3rem;
    display: flex;
    flex-wrap: wrap;
    row-gap: 3rem;
    column-gap: 4rem;
    width: 100%;
    justify-items: center;
    align-items: center;
    justify-content: space-evenly;
  }

  .wishlist-item-box > img {
    width: 400px !important;
    height: auto !important;
    object-fit: cover;
  }

  .wishlist-item-grid {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 12rem;
    height: 100%;
    border: 1px solid #333;
  }

  .wishlist-description {
    background-color: #fff;
    width: 100%;
    height: 100%;
    padding: 1rem 0.5rem;
  }

  .wishlist-description > small {
    font-size: 10px;
  }

  .wishlist-common-name {
    font-size: 10px;
  }

  .wishlist-title {
    font-weight: bold;
    font-size: 16px;
  }

  .wishlist-detail-header {
    display: flex;
    justify-content: flex-end;
  }

  .setting-icon {
    display: block;
    width: 24px;
    height: 24px;
    margin-right: 1rem;
    margin-top: 1rem;
  }

  .find-wishlist {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: #504855;
    gap: 2rem;
  }

  .guest-shopper {
    display: flex;
    align-items: center;
  }

  .guest-shopper > svg {
    width: 20px;
    height: 20px;
    margin-right: 0.8rem;
  }

  .guest-shopper > p {
    font-size: 0.9rem;
  }

  .find-wishlist-title {
    font-size: 1rem;
  }

  .find-wishlist-content {
    font-size: 0.9rem;
  }

  .find-wishlist-button {
    display: block;
    background-color: #504855;
    color: #fff;
    padding: 13px 30px;
  }

  .find-wishlist-button:hover {
    filter: brightness(1.2);
  }

  /* Modal styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    right: -24rem;
    top: 7rem;
    width: 100%;
    height: 100%;
    overflow: auto;
    padding-top: 60px;
  }

  .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 15px;
    border: 1px solid #888;
    max-width: 200px;
  }

  .close-button {
    color: #aaa;
    position: absolute;
    right: 33.5rem;
    top: 8rem;
    font-size: 1.5rem;
  }

  .close-share-button {
    color: #aaa;
    position: absolute;
    right: 24.5rem;
    top: 8rem;
    font-size: 1.5rem;
  }

  .close-button:hover,
  .close-button:focus,
  .close-share-button:hover,
  .close-share-button:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }

  .modal-menu {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .modal-menu-content {
    list-style: none;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    font-size: 0.8rem;
    padding-left: 1rem;
    cursor: pointer;
  }

  .modal-menu-content:hover {
    filter: brightness(1.75);
  }

  .modal-menu-content > svg {
    width: 1rem;
    height: 1rem;
    margin-right: 0.8rem;
  }

  .content-red {
    color: red;
  }

  .share-wishlist-modal.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
    padding-top: 60px;
  }

  .share-wishlist-modal .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
  }

  #share-wishlis-form {
    display: flex;
    flex-direction: column;
  }

  .wishlist-input-container {
    display: flex;
    flex-direction: column;
  }

  .wishlist-input-container label {
    font-size: 0.8rem;
  }

  .wishlist-input-container input {
    border: 1px #ddd solid;
    font-size: 0.8rem;
    padding: 0.5rem;
    width: 100%;
  }

  .wishlist-input-container textarea {
    border: 1px #ddd solid;
    font-size: 0.8rem;
    padding: 0.5rem;
    width: 100%;
  }

  #share-wishlist-form label {
    margin-top: 10px;
  }

  #share-wishlist-form input,
  #share-wishist-form textarea,
  #share-wishlist-form button {
    margin-top: 5px;
  }

  .required {
    color: red;
  }

  .required-mark {
    font-size: 0.8rem;
  }

  .button-container {
    display: flex;
    justify-content: flex-end;
    margin-top: 21px;
  }

  #wishlistSubmit {
    background-color: #434655;
    color: #fff;
    padding: 0.4rem 2rem;
  }

  #wishlistSubmit:disabled {
    background-color: #dcdcdd;
    color: #fff;
    padding: 0.4rem 2rem;
  }

  #loading-icon {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 9999;
  }
</style>
